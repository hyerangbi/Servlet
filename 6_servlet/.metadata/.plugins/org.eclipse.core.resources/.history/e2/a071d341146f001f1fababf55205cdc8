package com.kh.controller;

import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.PrintWriter;

/**
 * Servlet implementation class RequestPostServlet
 */
public class RequestPostServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public RequestPostServlet() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		//POST 방식 같은 경우
		//데이터를 추출하기 전에 인코딩 형식을 설정해줘야 한다
		request.setCharacterEncoding("UTF-8");
		
		
		//요청시 전달된 값들은 request의 parameter영역에 담겨있다.
		String name = request.getParameter("name"); // "이름" | "" 
		String gender = request.getParameter("gender"); // "M" | "W" | null
		int age = Integer.parseInt(request.getParameter("age")); // "23" => 23
		String city = request.getParameter("city"); // "경기" | "서울" ...
		double height = Double.parseDouble(request.getParameter("height")); // "179" -> 179.0000
		
		// 체크박스와 같이 복수의 벨류 값들을 추출하고자 할 때 
		String[] foods = request.getParameterValues("food"); // ["한식","중식"] | null
		
		System.out.println("name : " +name);
		System.out.println("gender : " +gender);
		System.out.println("age : " +age);
		System.out.println("city : " +city);
		System.out.println("height : " +height);
		
		if(foods == null) {
			System.out.println("foods : 없음");
		}else {
			System.out.println("foods : " + String.join(" ", foods));
		}
		// > service > dao > db 
		/*
		 * int result = new MemberService().insertMember(name, gender ...);
		 * if (result > 0){
		 *  //성공 
		 *  } else{
		 *   //실패
		 *  }
		 */
		
		
		// 순서 servlet 방식 : java 코드 내에 html을 기술
		// JSP(Java Server Page) : html내에 java 코드를 쓸 수 있다.
		
		// 응답페이지를 만드는 과정을 jsp에게 위임한다.
		// 단, 응답화면에서 필요로 하는 데이터들을 차곡차곡 담아 전달해줘야한다.
		// 데이터들을 담기 위한 공간 == request attribute 영역
		// request.setAttribute("키", 값)	
		
		request.setAttribute("name", name);
		request.setAttribute("age", age);
		request.setAttribute("city", city);
		request.setAttribute("height", height);
		request.setAttribute("gender", gender);
		request.setAttribute("foods", foods);
		
		// 응답하고자 하는 뷰(jsp) 선택해서 넘겨준다 -> RequestDispatcher 객체 생성
		RequestDispatcher view = request.getRequestDispatcher("/view/responsePage.jsp");
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		System.out.println("post 호출완료");
		doGet(request, response);
	}

}
